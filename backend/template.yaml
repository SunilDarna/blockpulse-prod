AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  BlockPulse API - Community Management Platform

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name

  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID

  CognitoUserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: nodejs18.x
    Environment:
      Variables:
        TABLE_NAME: !Ref DynamoDBTable
        USER_POOL_ID: !Ref CognitoUserPoolId
        USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClientId
        ENVIRONMENT: !Ref Environment

Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub blockpulse-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}

  # Lambda Functions
  CreateCommunityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: createCommunity.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities
            Method: post

  GetUserCommunitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: getUserCommunities.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities/user
            Method: get

  GetCommunityByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: getCommunityById.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities/{communityId}
            Method: get

  ListMembersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: listMembers.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities/{communityId}/members
            Method: get
            
  CreateAnnouncementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: createAnnouncement.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities/{communityId}/announcements
            Method: post
            
  GetAnnouncementsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: getAnnouncements.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities/{communityId}/announcements
            Method: get
            
  ReactToAnnouncementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: communities/
      Handler: reactToAnnouncement.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /communities/{communityId}/announcements/{announcementId}/reactions
            Method: post

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
  
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref DynamoDBTable
